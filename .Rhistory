arrange(Var2)
#Permet d'avoir les acides aminés
colnames(heatmap_data) = new_colnames
heatmap_data_long2 = melt(heatmap_data)
merged_heatmap_data$Var2 = heatmap_data_long2$Var2
highlighted_data_mutated[[R1_name]] <- row.names(merged_heatmap_data[merged_heatmap_data$mutation_other_read == TRUE, ])
heatmap_datas_mutated[[R1_name]]<- merged_heatmap_data
# Plotting code
d_plot <- ggplot(merged_heatmap_data, aes(Var2, Var1)) +
labs(x = R1_name, y = "Repeats") +
geom_tile(aes(fill = value.x), color = "black") +  # Ajout des cases de heatmap
geom_text(aes(label = value.y, color = mutation_other_read), size = 3) +  # Ajout des valeurs de value.y avec couleur basée sur mutation_other_read
geom_text(aes(label = value.y, color = is_index_to_mark), size = 3) +  # Ajout des valeurs de value.y avec couleur basée sur is_index_to_mark
scale_fill_gradient2(low = "red", mid = "yellow", high = "white",
midpoint = -3, name = "selection pressure") +
scale_color_manual(values = c("black", "blue"), guide = FALSE) +  # Couleurs des textes basées sur les colonnes ajoutées
guides(fill = guide_legend(title = "selection pressure"),
color = guide_legend(title = NULL, override.aes = list(size = 5))) +  # Personnalisation des légendes
theme(legend.position = "bottom")  # Position de la légende
print(d_plot)
cat("\n\n")
cat("\n\n")
}
cat("treshold for Logo of forbidden aa : ",treshold)
PCA_data_long <- read.csv("PCA_data_long.csv")
all_gemme_add_mutated_list <- list()
all_gemme_add_list <- list()
Scores <- list()
for (R1_name in names(final_result_list)) {
cat("\n\n")
cat("#### ",R1_name)
cat("\n\n")
debut_R1 <- as.integer(get_debut_for_name(R1_name, selected_structures))
end_R1 <- as.integer(get_end_for_name(R1_name, selected_structures))
intervalle <- c(debut_R1, end_R1)
bornes[[R1_name]] <- intervalle
numeros_lignes <- seq.int(debut_R1, end_R1)
# Plot 1 : ggplot pour data_filtre
data_filtre <- data_long_ori %>%
filter(ColumnNames >= debut_R1 & ColumnNames <= end_R1) %>%
replace_na(list(Value = 0)) %>%
mutate(abs_Value = abs(Value),
abs_Value_log = log(abs_Value + 1),
letter_size = ifelse(abs_Value == 0, max(abs_Value_log) + 1, max(abs_Value_log) - abs_Value_log + 1),
letter_size_pow100 = 10 ^ letter_size)
## Biochemic info
data(sequences)
acides_amines_dict <- unique(ggfortify(sequences, peptide, treatment = class)[, c("element", "Polarity", "Water")])
data_filtre$AA <- toupper(data_filtre$RowNames)
data_filtre <- merge(data_filtre, acides_amines_dict, by.x = "AA", by.y = "element", all.x = TRUE)
plot <- ggplot(data = data_filtre) +
geom_logo(aes(x = ColumnNames, y = letter_size_pow100, label = AA, fill = interaction(Polarity, Water)),
alpha = 0.6, position = "fill", color = "transparent")  +
labs(x =" ", y = "Allowed") +
scale_x_continuous(breaks = numeros_lignes) +
theme(plot.title = element_text(size = 100),
plot.subtitle = element_text(size = 40),
plot.caption = element_text(size = 100),
axis.title = element_text(size = 10))
# Plot 2 : ggplot pour Gemme_add
activation = 4
Gemme_add <- heatmap_datas[[R1_name]] %>%
group_by(Var2) %>%
summarize(
total_count = n(),
Somme_value_x_abs = mean(abs(value.x), na.rm = TRUE),
score = sum(abs(value.x) > activation, na.rm = TRUE) / n()
) %>%
mutate(
AA = gsub("[^[:alpha:]]", "", Var2),
Numero_ligne = numeros_lignes
)
# Traitement initial pour Gemme_add_mutated
Gemme_add_mutated <- heatmap_datas_mutated[[R1_name]] %>%
group_by(Var2) %>%
summarize(
total_count = n(),
Somme_value_x_abs = mean(abs(value.x), na.rm = TRUE),
score = sum(abs(value.x) > activation, na.rm = TRUE) / n()
) %>%
mutate(
AA = gsub("[^[:alpha:]]", "", Var2),
Numero_ligne = numeros_lignes
)
combined_df <- left_join(Gemme_add, Gemme_add_mutated, by = "Numero_ligne", suffix = c("_WT", "_mutated"))
combined_df <- combined_df %>%
mutate(ratio_score = score_mutated / score_WT) %>%
select(Numero_ligne, AA_WT, AA_mutated, score_WT, score_mutated, ratio_score)
colnames(combined_df)[colnames(combined_df) == "Numero_ligne"] <- "Position"
Gemme_add <- Gemme_add %>%
mutate(Somme_value_x_abs = ifelse(Somme_value_x_abs < treshold, 0, Somme_value_x_abs))
Gemme_add_mutated <- Gemme_add_mutated %>%
mutate(Somme_value_x_abs = ifelse(Somme_value_x_abs < treshold, 0, Somme_value_x_abs))
## Biochemic info
acides_amines_dict <- unique(ggfortify(sequences, peptide, treatment = class)[, c("element", "Polarity", "Water")])
Gemme_add$AA <- toupper(Gemme_add$AA)
Gemme_add_mutated$AA <- toupper(Gemme_add_mutated$AA)
Gemme_add <- merge(Gemme_add, acides_amines_dict, by.x = "AA", by.y = "element", all.x = TRUE)
Gemme_add_mutated <- merge(Gemme_add_mutated, acides_amines_dict, by.x = "AA", by.y = "element", all.x = TRUE)
plot_logo <- ggplot(data = Gemme_add ) +
geom_logo(aes(x = Numero_ligne, y = Somme_value_x_abs, label = AA, fill = interaction(Polarity, Water)),alpha = 0.6,position = "classic",color="transparent") +
labs(x =" ",y = "Forbidden")     +
scale_x_continuous(breaks = numeros_lignes) + theme(legend.position = "none") +     scale_x_continuous(breaks = numeros_lignes) +
theme(plot.title = element_text(size = 40),
plot.subtitle = element_text(size = 40),
plot.caption = element_text(size = 40),
axis.title = element_text(size = 10))
plot_mut <- ggplot(data = Gemme_add_mutated ) +
geom_logo(aes(x = Numero_ligne, y = Somme_value_x_abs, label = AA, fill = interaction(Polarity, Water)),alpha = 0.6,position = "classic",color="transparent") +
labs(x = paste("sequence",R1_name), y = "Forbidden pathogen")   +
scale_x_continuous(breaks = numeros_lignes) + theme(legend.position = "none") +     scale_x_continuous(breaks = numeros_lignes) +
theme(plot.title = element_text(size = 40),
plot.subtitle = element_text(size = 40),
plot.caption = element_text(size = 40),
axis.title = element_text(size = 10))
# Combinaison des deux graphiques et ajustements
combined_plot <- plot_logo + plot + plot_mut + plot_layout(nrow = 3, heights = c(1, 3))  #
# Afficher le graphique combiné
print(combined_plot)
all_gemme_add_list[[R1_name]] <- Gemme_add
all_gemme_add_mutated_list[[R1_name]] <- Gemme_add_mutated
Scores[[R1_name]] = combined_df
cat("\n\n")
cat("\n\n")
}
All_Gemme_add <- bind_rows(all_gemme_add_list)
All_Gemme_add_mutated <- bind_rows(all_gemme_add_mutated_list)
All_Gemme_add_combined <- bind_rows(All_Gemme_add, All_Gemme_add_mutated)
All_Gemme_add_combined <- All_Gemme_add_combined %>%
distinct(AA, Numero_ligne, .keep_all = TRUE)
score <- bind_rows(Scores)
All_Gemme_add_combined <- All_Gemme_add_combined %>%
mutate(
Var2 = substr(Var2, 1, 1)
)
PCA_data_long <- PCA_data_long %>%
left_join(All_Gemme_add_combined, by = c("AA_substitue" = "Var2", "Position" = "Numero_ligne"))
PCA_data_long <- PCA_data_long[, !names(PCA_data_long) %in% c("Var2", "Polarity_mutated", "Water_mutated")]
PCA_data_long <- PCA_data_long %>%
select(-AA_substitue)
write.csv(score, "scores_cb_EGF_like.csv", row.names = FALSE)
write.csv(PCA_data_long, "PCA_data_long.csv", row.names = FALSE)
# Charger les séquences alignées
aligned_sequences <- readAAStringSet("aligned_EGF_like_sequences.fasta")
# Sélectionner les structures EGF-like
selected_structures <- subset(Table_seq, grepl("^EGF-like", Structure))
final_result_list <- list()
# Boucle à travers chaque paire de séquences
for (i in 1:(length(aligned_sequences))) {
R1_sequence <- aligned_sequences[i]
R1_name <- names(aligned_sequences)[i]
results_list <- list()
for (j in 1:length(aligned_sequences)) {
if (j != i)  {
# Extraire les informations pour la paire de séquences actuelle
R2_sequence <- aligned_sequences[j]
R2_name <- names(aligned_sequences)[j]
get_debut_for_name <- function(sequence_name, structures_table) {
match_index <- grep(sequence_name, structures_table$Structure)
if (length(match_index) > 0) {
debut_fin_value <- structures_table$Debut_Fin[match_index]
debut_value <- sub(";.*", "", debut_fin_value)
return(debut_value)
} else {
return(NA)
}
}
# Utile en avale du code
get_end_for_name <- function(sequence_name, structures_table) {
match_index <- grep(sequence_name, structures_table$Structure)
if (length(match_index) > 0) {
debut_fin_value <- structures_table$Debut_Fin[match_index]
end_value <- sub(".*;", "", debut_fin_value)
return(end_value)
} else {
return(NA)
}
}
####
create_sequence_table <- function(sequence, debut_value) {
sequence_table <- data.frame(
Caractere = unlist(strsplit(as.character(sequence), "")),
Position_Absolue = debut_value + seq_along(sequence) - 1
)
# Ajouter le décalage uniquement pour les acides aminés (et laisser NA pour les gaps)
sequence_table$Position_Absolue <- ifelse(sequence_table$Caractere != "-",
sequence_table$Position_Absolue, NA)
# Ajouter +1 aux lignes suivantes (sauf si "-")
sequence_table$Position_Absolue[!is.na(sequence_table$Position_Absolue)] <-
sequence_table$Position_Absolue[!is.na(sequence_table$Position_Absolue)] +
seq_along(sequence_table$Position_Absolue[!is.na(sequence_table$Position_Absolue)]) - 1
rownames(sequence_table) = NULL
return(sequence_table)
}
debut_R1 <- as.integer(get_debut_for_name(R1_name, selected_structures))
debut_R2 <- as.integer(get_debut_for_name(R2_name, selected_structures))
table_R1 <- create_sequence_table(R1_sequence, debut_R1)
table_R2 <- create_sequence_table(R2_sequence, debut_R2)
table_R1$Caractere <- tolower(table_R1$Caractere)
table_R2$Caractere <- tolower(table_R2$Caractere)
combined_R1_R2  = cbind(table_R1, table_R2)
colnames(combined_R1_R2) <- c(paste(names(table_R1), "R1", sep = "_"), paste(names(table_R2), "R2", sep = "_"))
# Joindre combined_R1_R2 avec melted_matrix sur la première condition (left join) sans trier
result1 <- merge(combined_R1_R2, melted_matrix, by.x = c("Caractere_R1", "Position_Absolue_R2"), by.y = c("AA_substitue", "Position"), all.x = TRUE, sort = FALSE)
# Joindre combined_R1_R2 avec melted_matrix sur la deuxième condition (left join) sans trier
result2 <- merge(combined_R1_R2, melted_matrix, by.x = c("Caractere_R2", "Position_Absolue_R1"), by.y = c("AA_substitue", "Position"), all.x = TRUE, sort = FALSE)
colnames(result1)[colnames(result1) == "EvolCombi"] <- "AA de R1 score dans R2"
colnames(result2)[colnames(result2) == "EvolCombi"] <- "AA de R2 score dans R1"
# Enlève les gaps de R1
result1 <- subset(result1, !is.na(Position_Absolue_R1))
result2 <- subset(result2, !is.na(Position_Absolue_R1))
# Étape 1 : Supprimer les colonnes
result1 <- result1[, !(names(result1) %in% c("EvolCombi.Mean", "InMutationsMeanGemme"))]
result2 <- result2[, !(names(result2) %in% c("EvolCombi.Mean", "InMutationsMeanGemme"))]
# Étape 2 : Trier les résultats en tenant compte des valeurs "NA"
result1 <- result1[order(result1$Position_Absolue_R1, result1$Position_Absolue_R2), ]
result2 <- result2[order(result2$Position_Absolue_R1, result2$Position_Absolue_R2), ]
count_non_na_r1 <- sum(!is.na(result1$Position_Absolue_R1))
count_non_na_r2 <- sum(!is.na(result2$Position_Absolue_R2))
if (count_non_na_r1 == count_non_na_r2) {
merged_results <- cbind(result1, result2[,-1])
} else {
if (count_non_na_r1 > count_non_na_r2) {
result1 <- result1[order(result1$Position_Absolue_R1), ]
result2 <- result2[order(result2$Position_Absolue_R1), ]
} else {
result1 <- result1[order(result1$Position_Absolue_R2), ]
result2 <- result2[order(result2$Position_Absolue_R2), ]
}
# Fusionner les résultats
merged_results <- cbind(result1, result2[,-1])
}
combined_R1_R2 <- merged_results
combined_R1_R2 <- combined_R1_R2 %>%
select(unique(colnames(.)))
results_list[[R2_name]] <- combined_R1_R2
} }
final_result_list[[R1_name]] <- results_list
}
# Charger les séquences alignées
aligned_sequences <- readAAStringSet("aligned_EGF_like_sequences.fasta")
# Sélectionner les structures EGF-like
selected_structures <- subset(Table_seq_mutated, grepl("^EGF-like", Structure))
final_result_list_mutated <- list()
# Boucle à travers chaque paire de séquences
for (i in 1:(length(aligned_sequences))) {
R1_sequence <- aligned_sequences[i]
R1_name <- names(aligned_sequences)[i]
results_list <- list()
for (j in 1:length(aligned_sequences)) {
if (j != i)  {
# Extraire les informations pour la paire de séquences actuelle
R2_sequence <- aligned_sequences[j]
R2_name <- names(aligned_sequences)[j]
get_debut_for_name <- function(sequence_name, structures_table) {
match_index <- grep(sequence_name, structures_table$Structure)
if (length(match_index) > 0) {
debut_fin_value <- structures_table$Debut_Fin[match_index]
debut_value <- sub(";.*", "", debut_fin_value)
return(debut_value)
} else {
return(NA)
}
}
# Utile en avale du code
get_end_for_name <- function(sequence_name, structures_table) {
match_index <- grep(sequence_name, structures_table$Structure)
if (length(match_index) > 0) {
debut_fin_value <- structures_table$Debut_Fin[match_index]
end_value <- sub(".*;", "", debut_fin_value)
return(end_value)
} else {
return(NA)
}
}
####
create_sequence_table <- function(sequence, debut_value) {
sequence_table <- data.frame(
Caractere = unlist(strsplit(as.character(sequence), "")),
Position_Absolue = debut_value + seq_along(sequence) - 1
)
# Ajouter le décalage uniquement pour les acides aminés (et laisser NA pour les gaps)
sequence_table$Position_Absolue <- ifelse(sequence_table$Caractere != "-",
sequence_table$Position_Absolue, NA)
# Ajouter +1 aux lignes suivantes (sauf si "-")
sequence_table$Position_Absolue[!is.na(sequence_table$Position_Absolue)] <-
sequence_table$Position_Absolue[!is.na(sequence_table$Position_Absolue)] +
seq_along(sequence_table$Position_Absolue[!is.na(sequence_table$Position_Absolue)]) - 1
rownames(sequence_table) = NULL
return(sequence_table)
}
debut_R1 <- as.integer(get_debut_for_name(R1_name, selected_structures))
debut_R2 <- as.integer(get_debut_for_name(R2_name, selected_structures))
table_R1 <- create_sequence_table(R1_sequence, debut_R1)
table_R2 <- create_sequence_table(R2_sequence, debut_R2)
table_R1$Caractere <- tolower(table_R1$Caractere)
table_R2$Caractere <- tolower(table_R2$Caractere)
table_R1$index <- seq_len(nrow(table_R1))
table_R1$index <- seq_len(nrow(table_R1))
## Replace R1 by R1 mutated
merged_table <- merge(table_R1, mutation_non_sens, by.x = "Position_Absolue", by.y = "Position", all.x = TRUE)
merged_table$Caractere <- ifelse(!is.na(merged_table$AA_substitue), merged_table$AA_substitue, merged_table$Caractere)
merged_table <- merged_table[order(merged_table$index), ]
merged_table$index <- NULL
merged_table <- merged_table[, 1:2]
duplicated_rows <- duplicated(merged_table$Position_Absolue) & !is.na(merged_table$Position_Absolue)
merged_table <- merged_table[!duplicated_rows | is.na(merged_table$Position_Absolue), ]
table_R1 <- merged_table
combined_R1_R2  = cbind(table_R1, table_R2)
colnames(combined_R1_R2) <- c(paste(names(table_R1), "R1", sep = "_"), paste(names(table_R2), "R2", sep = "_"))
# Joindre combined_R1_R2 avec melted_matrix sur la première condition (left join) sans trier
result1 <- merge(combined_R1_R2, melted_matrix, by.x = c("Caractere_R1", "Position_Absolue_R2"), by.y = c("AA_substitue", "Position"), all.x = TRUE, sort = FALSE)
# Joindre combined_R1_R2 avec melted_matrix sur la deuxième condition (left join) sans trier
result2 <- merge(combined_R1_R2, melted_matrix, by.x = c("Caractere_R2", "Position_Absolue_R1"), by.y = c("AA_substitue", "Position"), all.x = TRUE, sort = FALSE)
colnames(result1)[colnames(result1) == "EvolCombi"] <- "AA de R1 score dans R2"
colnames(result2)[colnames(result2) == "EvolCombi"] <- "AA de R2 score dans R1"
# Enlève les gaps de R1
result1 <- subset(result1, !is.na(Position_Absolue_R1))
result2 <- subset(result2, !is.na(Position_Absolue_R1))
# Étape 1 : Supprimer les colonnes
result1 <- result1[, !(names(result1) %in% c("EvolCombi.Mean", "InMutationsMeanGemme"))]
result2 <- result2[, !(names(result2) %in% c("EvolCombi.Mean", "InMutationsMeanGemme"))]
# Étape 2 : Trier les résultats en tenant compte des valeurs "NA"
result1 <- result1[order(result1$Position_Absolue_R1, result1$Position_Absolue_R2), ]
result2 <- result2[order(result2$Position_Absolue_R1, result2$Position_Absolue_R2), ]
count_non_na_r1 <- sum(!is.na(result1$Position_Absolue_R1))
count_non_na_r2 <- sum(!is.na(result2$Position_Absolue_R2))
if (count_non_na_r1 == count_non_na_r2) {
merged_results <- cbind(result1, result2[,-1])
} else {
if (count_non_na_r1 > count_non_na_r2) {
result1 <- result1[order(result1$Position_Absolue_R1), ]
result2 <- result2[order(result2$Position_Absolue_R1), ]
} else {
result1 <- result1[order(result1$Position_Absolue_R2), ]
result2 <- result2[order(result2$Position_Absolue_R2), ]
}
# Fusionner les résultats
merged_results <- cbind(result1, result2[,-1])
}
combined_R1_R2 <- merged_results
combined_R1_R2 <- combined_R1_R2 %>%
select(unique(colnames(.)))
results_list[[R2_name]] <- combined_R1_R2
} }
final_result_list_mutated[[R1_name]] <- results_list
}
# Charger les séquences alignées
aligned_sequences <- readAAStringSet("aligned_EGF_like_sequences.fasta")
# Sélectionner les structures EGF-like
selected_structures <- subset(Table_seq, grepl("^EGF-like", Structure))
final_result_list <- list()
# Boucle à travers chaque paire de séquences
for (i in 1:(length(aligned_sequences))) {
R1_sequence <- aligned_sequences[i]
R1_name <- names(aligned_sequences)[i]
results_list <- list()
for (j in 1:length(aligned_sequences)) {
if (j != i)  {
# Extraire les informations pour la paire de séquences actuelle
R2_sequence <- aligned_sequences[j]
R2_name <- names(aligned_sequences)[j]
get_debut_for_name <- function(sequence_name, structures_table) {
match_index <- grep(sequence_name, structures_table$Structure)
if (length(match_index) > 0) {
debut_fin_value <- structures_table$Debut_Fin[match_index]
debut_value <- sub(";.*", "", debut_fin_value)
return(debut_value)
} else {
return(NA)
}
}
# Utile en avale du code
get_end_for_name <- function(sequence_name, structures_table) {
match_index <- grep(sequence_name, structures_table$Structure)
if (length(match_index) > 0) {
debut_fin_value <- structures_table$Debut_Fin[match_index]
end_value <- sub(".*;", "", debut_fin_value)
return(end_value)
} else {
return(NA)
}
}
####
create_sequence_table <- function(sequence, debut_value) {
sequence_table <- data.frame(
Caractere = unlist(strsplit(as.character(sequence), "")),
Position_Absolue = debut_value + seq_along(sequence) - 1
)
# Ajouter le décalage uniquement pour les acides aminés (et laisser NA pour les gaps)
sequence_table$Position_Absolue <- ifelse(sequence_table$Caractere != "-",
sequence_table$Position_Absolue, NA)
# Ajouter +1 aux lignes suivantes (sauf si "-")
sequence_table$Position_Absolue[!is.na(sequence_table$Position_Absolue)] <-
sequence_table$Position_Absolue[!is.na(sequence_table$Position_Absolue)] +
seq_along(sequence_table$Position_Absolue[!is.na(sequence_table$Position_Absolue)]) - 1
rownames(sequence_table) = NULL
return(sequence_table)
}
debut_R1 <- as.integer(get_debut_for_name(R1_name, selected_structures))
debut_R2 <- as.integer(get_debut_for_name(R2_name, selected_structures))
table_R1 <- create_sequence_table(R1_sequence, debut_R1)
table_R2 <- create_sequence_table(R2_sequence, debut_R2)
table_R1$Caractere <- tolower(table_R1$Caractere)
table_R2$Caractere <- tolower(table_R2$Caractere)
combined_R1_R2  = cbind(table_R1, table_R2)
colnames(combined_R1_R2) <- c(paste(names(table_R1), "R1", sep = "_"), paste(names(table_R2), "R2", sep = "_"))
# Joindre combined_R1_R2 avec melted_matrix sur la première condition (left join) sans trier
result1 <- merge(combined_R1_R2, melted_matrix, by.x = c("Caractere_R1", "Position_Absolue_R2"), by.y = c("AA_substitue", "Position"), all.x = TRUE, sort = FALSE)
# Joindre combined_R1_R2 avec melted_matrix sur la deuxième condition (left join) sans trier
result2 <- merge(combined_R1_R2, melted_matrix, by.x = c("Caractere_R2", "Position_Absolue_R1"), by.y = c("AA_substitue", "Position"), all.x = TRUE, sort = FALSE)
colnames(result1)[colnames(result1) == "EvolCombi"] <- "AA de R1 score dans R2"
colnames(result2)[colnames(result2) == "EvolCombi"] <- "AA de R2 score dans R1"
# Enlève les gaps de R1
result1 <- subset(result1, !is.na(Position_Absolue_R1))
result2 <- subset(result2, !is.na(Position_Absolue_R1))
# Étape 1 : Supprimer les colonnes
result1 <- result1[, !(names(result1) %in% c("EvolCombi.Mean", "InMutationsMeanGemme"))]
result2 <- result2[, !(names(result2) %in% c("EvolCombi.Mean", "InMutationsMeanGemme"))]
# Étape 2 : Trier les résultats en tenant compte des valeurs "NA"
result1 <- result1[order(result1$Position_Absolue_R1, result1$Position_Absolue_R2), ]
result2 <- result2[order(result2$Position_Absolue_R1, result2$Position_Absolue_R2), ]
count_non_na_r1 <- sum(!is.na(result1$Position_Absolue_R1))
count_non_na_r2 <- sum(!is.na(result2$Position_Absolue_R2))
if (count_non_na_r1 == count_non_na_r2) {
merged_results <- cbind(result1, result2[,-1])
} else {
if (count_non_na_r1 > count_non_na_r2) {
result1 <- result1[order(result1$Position_Absolue_R1), ]
result2 <- result2[order(result2$Position_Absolue_R1), ]
} else {
result1 <- result1[order(result1$Position_Absolue_R2), ]
result2 <- result2[order(result2$Position_Absolue_R2), ]
}
# Fusionner les résultats
merged_results <- cbind(result1, result2[,-1])
}
combined_R1_R2 <- merged_results
combined_R1_R2 <- combined_R1_R2 %>%
select(unique(colnames(.)))
results_list[[R2_name]] <- combined_R1_R2
} }
final_result_list[[R1_name]] <- results_list
}
final_result_list
SEUIL = -6.5
scape_gap = TRUE
INTERVALLE = c(1700,1750)
mutation_pathogene = "non" #patho, div or non
treshold = 1
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
library(rmarkdown)
library(stringr)
library(tidyverse)
library(reshape2)
library(heatmaply)
library(Biostrings)
library(openxlsx)
library(readxl)
library(gridExtra)
library(patchwork)
library(ggnewscale)
library(RColorBrewer)
library(msa)
library(cowplot)
library(seqLogo)
library(immunarch)
library(gglogo)
library(cluster)
theme_set( theme_classic())
cat("Threshold for EvolCombi:", SEUIL, "| Truncate sequence for gaps in the WT?:", scape_gap)
cat("type of mutation studied here :", mutation_pathogene)
#PATH ##########################################################################
path_prot = "./FBN1/P35555/"               #chemin relatif
path_thoraxe = "./FBN1/thoraxe/"
path_phylosof = paste0(path_thoraxe,"phylosofs/")
path_msa = paste0(path_thoraxe,"msa/")
# DATA #########################################################################
Conservation = read.table(paste0(path_prot,"P35555_conservation.txt"))
EvolCombi = read.table(paste0(path_prot,"P35555_normPred_evolCombi.txt"))
EvolEpi = read.table(paste0(path_prot,"P35555_normPred_evolEpi.txt"))
EvolInd = read.table(paste0(path_prot,"P35555_normPred_evolInd.txt"))
Ases_table = read.csv(paste0(path_thoraxe,"ases_table.csv"))
Path_table = read.csv(paste0(path_thoraxe,"path_table.csv"))
s_exon = read.csv(paste0(path_thoraxe,"s_exon_table.csv"))
transcripts_pir = readLines(paste0(path_phylosof,"transcripts.pir"))
#######prot #####################################################################
fichier_fasta <- paste0(path_prot,"P35555.FASTA")
lines <- readLines(fichier_fasta)
sequence_dict <- list()
current_seq_name <- ""
current_seq <- character()
for (line in lines) {
if (startsWith(line, ">")) {
if (current_seq_name != "") {
sequence_dict[[current_seq_name]] <- paste(current_seq, collapse = "")
}
current_seq_name <- substr(line, 2, nchar(line))
current_seq <- character()
} else {
current_seq <- c(current_seq, line)
}
}
# Enregistrez la dernière séquence
if (current_seq_name != "") {
sequence_dict[[current_seq_name]] <- paste(current_seq, collapse = "")
}
P35555 = sequence_dict$P35555
file_path <- "./FBN1/FBN1stru.xls"
sheet_names <- excel_sheets(file_path)
